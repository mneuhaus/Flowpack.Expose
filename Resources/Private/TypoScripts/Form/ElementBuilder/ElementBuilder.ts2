/**
 * @context className the class name to be rendered
 * @context propertyName
 * @context propertyType
 * @context propertyElementType
 */
prototype(TYPO3.Expose:Form.ElementBuilder) < prototype(TYPO3.TypoScript:Case) {
	prototype(TYPO3.TypoScript:Matcher).type = 'TYPO3.Expose:Form.DefaultElementBuilder'

#	debug {
#		condition = ${q(p).debug(propertySchema)}
#		@position = 'start'
#	}

	typoscript {
		condition = ${propertySchema['element']}
		@position = 'start'
		@override.formFieldType = ${propertySchema['element']}
	}

	elementFromAnnotation {
		condition = ${propertySchema['annotations']['TYPO3\Expose\Annotations\Element']}
		@position = '20'
		@override.formFieldType = ${propertySchema['annotations']['TYPO3\Expose\Annotations\Element']['0'].name}
	}


	textfieldType {
		condition = ${propertySchema['type'] == 'string' && propertySchema['annotations']['Doctrine\ORM\Mapping\Column']['0'].type == 'text'}
		@position = '90'
		@override.formFieldType = 'TYPO3.Form:MultiLineText'
	}

	simpleStringType {
		condition = ${propertySchema['type'] == 'string'}
		@position = '100'
		@override.formFieldType = 'TYPO3.Form:SingleLineText'
	}

	simpleIntegerType {
		condition = ${propertySchema['type'] == 'integer'}
		@position = '110'
		@override.formFieldType = 'TYPO3.Form:SingleLineText'
	}

	simpleFloatType {
		condition = ${propertySchema['type'] == 'float'}
		@position = '120'
		@override.formFieldType = 'TYPO3.Form:SingleLineText'
	}

	dateTimeType {
		condition = ${propertySchema['type'] == '\DateTime'}
		@position = '90'
		@override.formFieldType = 'TYPO3.Form:DatePicker'
		element.@override.propertyType = 'DateTime'
	}

	inline {
		condition = ${propertySchema['inline']['element']}
		type = 'TYPO3.Expose:Form.InlineElementBuilder'
		@position = '180'
		@override.formFieldType = ${propertySchema['inline']['element']}
	}

	manyToMany {
		condition = ${propertySchema['annotations']['Doctrine\ORM\Mapping\ManyToMany']}
		@position = '200'
		@override.formFieldType = 'TYPO3.Form:MultipleSelectDropdown'
	}

	manyToOne {
		condition = ${propertySchema['annotations']['Doctrine\ORM\Mapping\ManyToOne']}
		@position = '200'
		@override.formFieldType = 'TYPO3.Form:SingleSelectDropdown'
	}

	oneToMany {
		condition = ${propertySchema['annotations']['Doctrine\ORM\Mapping\OneToMany']}
		@position = '200'
		@override.formFieldType = 'TYPO3.Form:MultipleSelectDropdown'
	}

	oneToOne {
		condition = ${propertySchema['annotations']['Doctrine\ORM\Mapping\OneToOne']}
		@position = '200'
		@override.formFieldType = 'TYPO3.Form:SingleSelectDropdown'
	}


	array {
		condition = ${propertySchema['type'] == 'array'}
		@position = '300'
		@override.formFieldType = 'TYPO3.Form:MultipleSelectDropdown'
	}


	textfieldType {
		// TODO: bug in EEL: ['0'] should not need to be quoted.
		condition = ${propertySchema['type'] == 'string' && propertySchema['annotations']['Doctrine\ORM\Mapping\Column']['0'].type == 'text'}
		@position = '90'
		@override.formFieldType = 'TYPO3.Form:MultiLineText'
	}

	// NODE START
	booleanType {
			// We want to hide the editor for the _removed flag
		condition = ${propertySchema['type'] == 'boolean' && propertyName != '_removed'}
		@position = '90'
		@override.formFieldType = 'TYPO3.Form:Checkbox'
	}

	nodeTextfieldType {
		// TODO: bug in EEL: ['0'] should not need to be quoted.
		condition = ${propertySchema['type'] == 'string' && propertySchema.userInterface.class == 'T3.Content.UI.Editor.HtmlEditor'}
		@position = '90'
		@override.formFieldType = 'TYPO3.Form:MultiLineText'
	}

	nodeDateType {
		// TODO: bug in EEL: ['0'] should not need to be quoted.
		condition = ${propertySchema['type'] == 'date'}
		@position = '90'
		@override.formFieldType = 'TYPO3.Form:DatePicker'
		element.@override.propertyType = '\DateTime'

	}
	// NODE END

}